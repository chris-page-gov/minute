"""Add minute, hallucination and  minute version tables

Revision ID: bea950bbbeda
Revises: e577c83813f8
Create Date: 2025-06-27 16:10:46.666967

"""

from collections.abc import Sequence

import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "bea950bbbeda"
down_revision: str | None = "e577c83813f8"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None

job_status_enum = sa.Enum("AWAITING_START", "IN_PROGRESS", "COMPLETED", "FAILED", name="jobstatus")
content_source_enum = sa.Enum("MANUAL_EDIT", "AI_EDIT", "INITIAL_GENERATION", name="contentsource")
hallucination_type_enum = sa.Enum(
    "FACTUAL_FABRICATION", "NONSENSICAL", "CONTRADICTION", "MISLEADING", "OTHER", name="hallucinationtype"
)


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "minute",
        sa.Column("id", sa.Uuid(), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("transcription_id", sa.Uuid(), nullable=False),
        sa.Column("template_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(["transcription_id"], ["transcription.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "minute_version",
        sa.Column("id", sa.Uuid(), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("minute_id", sa.Uuid(), nullable=False),
        sa.Column("html_content", sqlmodel.sql.sqltypes.AutoString(), server_default="", nullable=False),
        sa.Column(
            "status",
            job_status_enum,
            server_default="AWAITING_START",
            nullable=False,
        ),
        sa.Column("error", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("ai_edit_instructions", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "content_source",
            content_source_enum,
            server_default="INITIAL_GENERATION",
            nullable=False,
        ),
        sa.ForeignKeyConstraint(["minute_id"], ["minute.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "hallucination",
        sa.Column("id", sa.Uuid(), server_default=sa.text("gen_random_uuid()"), nullable=False),
        sa.Column("created_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_datetime", sa.TIMESTAMP(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("minute_version_id", sa.Uuid(), nullable=False),
        sa.Column(
            "hallucination_type",
            hallucination_type_enum,
            nullable=False,
        ),
        sa.Column("hallucination_text", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("hallucination_reason", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.ForeignKeyConstraint(["minute_version_id"], ["minute_version.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_index("ix_transcriptionjobstate_file_key", table_name="transcriptionjobstate")
    op.drop_table("transcriptionjobstate")
    op.add_column("transcription", sa.Column("s3_file_key", sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.add_column(
        "transcription",
        sa.Column(
            "status",
            job_status_enum,
            nullable=True,
        ),
    )
    op.execute(sa.text("UPDATE transcription SET status='COMPLETED' WHERE status is NULL"))
    op.alter_column("transcription", "status", server_default="AWAITING_START", nullable=False)
    op.add_column("transcription", sa.Column("error", sqlmodel.sql.sqltypes.AutoString(), nullable=True))
    op.alter_column(
        "transcription",
        "id",
        existing_type=sa.UUID(),
        server_default=sa.text("gen_random_uuid()"),
        existing_nullable=False,
    )
    op.alter_column(
        "transcription",
        "created_datetime",
        existing_type=postgresql.TIMESTAMP(),
        server_default=sa.text("now()"),
        type_=sa.TIMESTAMP(timezone=True),
        existing_nullable=False,
    )
    op.execute(sa.text("UPDATE transcription SET updated_datetime=NOW() WHERE updated_datetime is NULL"))
    op.alter_column(
        "transcription",
        "updated_datetime",
        existing_type=postgresql.TIMESTAMP(),
        server_default=sa.text("now()"),
        type_=sa.TIMESTAMP(timezone=True),
        nullable=False,
    )
    op.create_unique_constraint(None, "transcription", ["s3_file_key"])
    op.drop_column("transcription", "uploaded_documents")
    op.alter_column(
        "user", "id", existing_type=sa.UUID(), server_default=sa.text("gen_random_uuid()"), existing_nullable=False
    )
    op.alter_column(
        "user",
        "created_datetime",
        existing_type=postgresql.TIMESTAMP(),
        server_default=sa.text("now()"),
        type_=sa.TIMESTAMP(timezone=True),
        existing_nullable=False,
    )
    op.execute(sa.text("UPDATE public.user SET updated_datetime=NOW() WHERE updated_datetime is NULL"))
    op.alter_column(
        "user",
        "updated_datetime",
        existing_type=postgresql.TIMESTAMP(),
        server_default=sa.text("now()"),
        type_=sa.TIMESTAMP(timezone=True),
        nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "user",
        "updated_datetime",
        existing_type=sa.TIMESTAMP(timezone=True),
        server_default=None,
        type_=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.alter_column(
        "user",
        "created_datetime",
        existing_type=sa.TIMESTAMP(timezone=True),
        server_default=None,
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column("user", "id", existing_type=sa.UUID(), server_default=None, existing_nullable=False)
    op.add_column(
        "transcription",
        sa.Column("uploaded_documents", postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    )
    op.drop_constraint("transcription_s3_file_key_key", "transcription", type_="unique")
    op.alter_column(
        "transcription",
        "updated_datetime",
        existing_type=sa.TIMESTAMP(timezone=True),
        server_default=None,
        type_=postgresql.TIMESTAMP(),
        nullable=True,
    )
    op.alter_column(
        "transcription",
        "created_datetime",
        existing_type=sa.TIMESTAMP(timezone=True),
        server_default=None,
        type_=postgresql.TIMESTAMP(),
        existing_nullable=False,
    )
    op.alter_column("transcription", "id", existing_type=sa.UUID(), server_default=None, existing_nullable=False)
    op.drop_column("transcription", "error")
    op.drop_column("transcription", "status")
    op.drop_column("transcription", "s3_file_key")
    op.create_table(
        "transcriptionjobstate",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("file_key", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("error", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("dialogue_entries", postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
        sa.Column("created_datetime", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("updated_datetime", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="transcriptionjobstate_pkey"),
    )
    op.create_index("ix_transcriptionjobstate_file_key", "transcriptionjobstate", ["file_key"], unique=False)
    op.drop_table("hallucination")
    op.drop_table("minute_version")
    op.drop_table("minute")
    job_status_enum.drop(op.get_bind())
    content_source_enum.drop(op.get_bind())
    hallucination_type_enum.drop(op.get_bind())
    # ### end Alembic commands ###
